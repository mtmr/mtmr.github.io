<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | muthu raj]]></title>
  <link href="http://muthusblog.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://muthusblog.com/"/>
  <updated>2015-03-18T17:55:51+05:30</updated>
  <id>http://muthusblog.com/</id>
  <author>
    <name><![CDATA[Muthu Raj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RMI - Quick Writeup]]></title>
    <link href="http://muthusblog.com/blog/2015/02/16/rmi-quick-writeup/"/>
    <updated>2015-02-16T22:42:55+05:30</updated>
    <id>http://muthusblog.com/blog/2015/02/16/rmi-quick-writeup</id>
    <content type="html"><![CDATA[<h2>RMI execution at a glance..</h2>

<p>This is intended to be a quick guide to execute RMI as means for understanding the concept. This is for lab only and is not meant to be taken as a real life guide for RMI exection. For that refer Core JAVA - Volume 2 by Cay Horstmann.</p>

<!--more-->


<h2>Client side</h2>

<ul>
<li>Extend and implement the Remote interface in java.rmi.*.</li>
<li>Make sure your methods throw RemoteException and use either <code>Naming.lookup(rmi://localhost/you_class)</code> or <code>namingcontext.lookup(rmi://localhost/your_class)</code>. Here namingcontext is an object constructed using <code>Context namingcontext = new InitialContext();</code>.</li>
<li>After looking up, use casting to get the object of the type you need.</li>
<li>See the code below.</li>
</ul>


<pre><code class="java Warehouse.java">
import java.rmi.*;
public interface Warehouse extends Remote
{
    double getPrice(String description) throws RemoteException;
}
</code></pre>

<p>This one demonstrates the second point.</p>

<pre><code class="java WarehouseClient.java">
import java.rmi.*;
import java.util.*;
import javax.naming.*;
public class WarehouseClient
{
    public static void main(String[] args) throws NamingException, RemoteException
    {
        Context namingcontext = new InitialContext();
        System.out.println("RMI registry bindings..");
        String url = "rmi://localhost/centralwarehouse";
        Warehouse centralwarehouse = (Warehouse) namingcontext.lookup(url);
        String descr = "Blackwell Toaster";
        double price = centralwarehouse.getPrice(descr);
        System.out.println(descr + " : " + price);

    }
}
</code></pre>

<h2>Server Side&#8230;</h2>

<ul>
<li>Implement the interface you defined in client side.</li>
<li>Make sure you extend <code>UnicastRemoteObject</code> in <code>java.rmi.server.*</code>(Import it and extend it.)</li>
<li>Bind the class to a rmi registry using similar methods you used for lookup. Replace lookup by bind. The main method show throw <code>NamingException</code> and <code>RemoteException</code>.</li>
<li>Compile everything.</li>
</ul>


<p>This demonstrates the first point.</p>

<pre><code class="java WarehouseImpl.java">
import java.rmi.*;
import java.rmi.server.*;
import java.util.*;
public class WarehouseImpl extends UnicastRemoteObject implements Warehouse
{
    private Map&lt;String, Double&gt; prices;
    public WarehouseImpl() throws RemoteException
    {
        prices = new HashMap&lt;&gt;();
        prices.put("Blackwell Toaster", 24.95);
        prices.put("ZapXpress Microwave Oven", 49.95);
    }
    public double getPrice(String description) throws RemoteException
    {
        Double price = prices.get(description);
        return price == null ? 0 : price;
    }
}
</code></pre>

<p>This demonstrates the Third point.</p>

<pre><code class="java WarehouseServer.java">
import java.rmi.*;
import javax.naming.*;

public class WarehouseServer
{
    public static void main(String[] args) throws RemoteException, NamingException
    {
        System.out.println("Constructing server Implementation...");
        WarehouseImpl centralwarehouse = new WarehouseImpl();
        System.out.println("Binding implementation to registry..");
        Context namingContext = new InitialContext();
        namingContext.bind("rmi:centralwarehouse", centralwarehouse);
        System.out.println("Waiting for Invocation from clients");
    }
}
</code></pre>

<p>After you compile everything, (Make sure they are in same folder). Do these in order.</p>

<ul>
<li><p>Open Three cmd windows or terminals.</p></li>
<li><p>Start rmiregistry by executing <code>rmiregistry</code></p></li>
<li><p>Start the server program by <code>java WarehouseServer</code></p></li>
<li><p>Start the client program by <code>java WarehouseClient</code></p></li>
</ul>


<p>That&#8217;s it. You <em><em>DO NOT</em></em> need <code>rmic</code>. It is deprecated since JAVA version 1.5. We have 1.6 in lab.
Pat yourselves on the back. You successfully executed RMI program. And also, realworld RMI isn&#8217;t this simple. You have something called dynamic class loading that can really drive you up the wall if you aren&#8217;t careful.</p>

<p>The code examples are copied from Core Java - Volume 2 9th Edition by Cay Horstmann.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Douglas Crockford - Javascript]]></title>
    <link href="http://muthusblog.com/blog/2015/02/15/douglas-crockford-javascript/"/>
    <updated>2015-02-15T15:02:42+05:30</updated>
    <id>http://muthusblog.com/blog/2015/02/15/douglas-crockford-javascript</id>
    <content type="html"><![CDATA[<h2>Javascript - By Douglas Crockford</h2>

<p>This is one of the best videos on a programming language I have seen. And since its availability is spotty, I&#8217;ve uploaded it to my Google Drive and embedded it here. Copyright belongs to Yahoo!.</p>

<!--more-->


<h2>Part - I</h2>

<div align = "center" markdown = "0">
<iframe src="https://docs.google.com/file/d/0B-QbWCkLjW6qQjhyeUMwUkVLSDg/preview" width="640" height="480"></iframe>
</div>


<h2>Part - II</h2>

<div align = "center" markdown = "0">
<iframe src="https://docs.google.com/file/d/0B-QbWCkLjW6qMWFkZ3NQdEhybkk/preview" width="640" height="480"></iframe>
</div>


<h2>Part - III</h2>

<div align = "center" markdown = "0">
<iframe src="https://docs.google.com/file/d/0B-QbWCkLjW6qdjI2ektlYnJWcGs/preview" width="640" height="480"></iframe>
</div>


<h2>Part - IV</h2>

<div align = "center" markdown = "0">
<iframe src="https://docs.google.com/file/d/0B-QbWCkLjW6qTlVYWVRHV2dqSlU/preview" width="640" height="480"></iframe>
</div>

]]></content>
  </entry>
  
</feed>
