<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | muthu raj]]></title>
  <link href="http://muthusblog.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://muthusblog.com/"/>
  <updated>2015-01-19T13:02:13+05:30</updated>
  <id>http://muthusblog.com/</id>
  <author>
    <name><![CDATA[Muthu Raj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The story of Operating systems]]></title>
    <link href="http://muthusblog.com/blog/2015/01/19/the-story-of-operating-systems/"/>
    <updated>2015-01-19T12:54:57+05:30</updated>
    <id>http://muthusblog.com/blog/2015/01/19/the-story-of-operating-systems</id>
    <content type="html"><![CDATA[<h2>An excerpt from <em>In the Beginnning was the commandline</em> by <strong>Neal Stephenson</strong></h2>

<h1>MGBs, TANKS, AND BATMOBILES</h1>

<p>Imagine a crossroads where four competing auto dealerships are situated. One of them (Microsoft) is much, much bigger than the others. It started out years ago selling three-speed bicycles (MS-DOS); these were not perfect, but they worked, and when they broke you could easily fix them.
There was a competing bicycle dealership next door (Apple) that one day began selling motorized vehicles—expensive but attractively styled cars with their innards hermetically sealed, so that how they worked was something of a mystery.</p>

<p>The big dealership responded by rushing a moped upgrade kit (the original Windows) onto the market. This was a Rube Goldberg contraption that, when bolted onto a three-speed bicycle, enabled it to keep up, just barely, with Apple-cars. The users had to wear goggles and were always picking bugs out of their teeth while Apple owners sped along in hermetically sealed comfort, sneering out the windows. But the Micro-mopeds were cheap, and easy to fix compared with the Apple-cars, and their market share waxed.</p>

<p>Eventually the big dealership came out with a full-fledged car: a colossal station wagon (Windows 95). It had all the aesthetic appeal of a Soviet worker housing block, it leaked oil and blew gaskets, and it was an enormous success. A little later, they also came out with a hulking off-road vehicle intended for industrial users (Windows NT), which was no more beautiful than the station wagon and only a little more reliable.</p>

<p>Since then there has been a lot of noise and shouting, but little has changed. The smaller dealership continues to sell sleek Euro-styled sedans and to spend a lot of money on advertising campaigns. They have had GOING OUT OF BUSINESS! signs taped up in their windows for so long that they have gotten all yellow and curly. The big one keeps making bigger and bigger station wagons and ORVs.</p>

<p>On the other side of the road are two competitors that have come along more recently.
One of them (Be, Inc.) is selling fully operational Batmobiles (the BeOS). They are more beautiful and stylish even than the Euro-sedans, better designed, more technologically advanced, and at least as reliable as anything else on the market—and yet cheaper than the others.
With one exception, that is: Linux, which is right next door, and which is not a business at all. It’s a bunch of RVs, yurts, tepees, and geodesic domes set up in a field and organized by consensus. The people who live there are making tanks. These are not old-fashioned, cast-iron Soviet tanks; these are more like the M1 tanks of the U.S. Army, made of space-age materials and jammed with sophisticated technology from one end to the other. But they are better than army tanks. They’ve been modified in such a way that they never, ever break down, are light and maneuverable enough to use on ordinary streets, and use no more fuel than a subcompact car. These tanks are being cranked out, on the spot, at a terrific pace, and a vast number of them are lined up along the edge of the road with keys in the ignition. Anyone who wants can simply climb into one and drive it away for free.</p>

<p>Customers come to this crossroads in throngs, day and night. Ninety percent of them go straight to the biggest dealership and buy station wagons or off-road vehicles. They do not even look at the other dealerships.</p>

<p>Of the remaining ten percent, most go and buy a sleek Euro-sedan, pausing only to turn up their noses at the philistines going to buy the station wagons and ORVs. If they even notice the people on the opposite side of the road, selling the cheaper, technically superior vehicles, these customers deride them as cranks and half-wits.
The Batmobile outlet sells a few vehicles to the occasional car nut who wants a second vehicle to go with his station wagon, but seems to accept, at least for now, that it’s a fringe player.</p>

<p>The group giving away the free tanks only stays alive because it is staffed by volunteers, who are lined up at the edge of the street with bullhorns, trying to draw customers’ attention to this incredible situation. A typical conversation goes something like this:</p>

<p>HACKER WITH BULLHORN: “Save your money! Accept one of our free tanks! It is invulnerable, and can drive across rocks and swamps at ninety miles an hour while getting a hundred miles to the gallon!”</p>

<p>PROSPECTIVE STATION WAGON BUYER: “I know what you say is true…but…er…I don’t know how to maintain a tank!”</p>

<p>BULLHORN: “You don’t know how to maintain a station wagon either!”</p>

<p>BUYER: “But this dealership has mechanics on staff. If something goes wrong with my station wagon, I can take a day off work, bring it here, and pay them to work on it while I sit in the waiting room for hours, listening to elevator music.”</p>

<p>BULLHORN: “But if you accept one of our free tanks, we will send volunteers to your house to fix it for free while you sleep!”</p>

<p>BUYER: “Stay away from my house, you freak!”</p>

<p>BULLHORN: “But…”</p>

<p>BUYER: “Can’t you see that everyone is buying station wagons?”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding the commands used in OS lab]]></title>
    <link href="http://muthusblog.com/blog/2015/01/11/understanding-the-commands-used-in-lab/"/>
    <updated>2015-01-11T15:45:42+05:30</updated>
    <id>http://muthusblog.com/blog/2015/01/11/understanding-the-commands-used-in-lab</id>
    <content type="html"><![CDATA[<p>According to me, mastering the shell scripting required for our lab (or anywhere for that matter) involves <del>three</del> four things..</p>

<ol>
<li><p>Quoting</p></li>
<li><p>Command substitution and File name expansion</p></li>
<li><p>Regular expressions</p></li>
<li><p>Knowledge of commandline utilities</p></li>
</ol>


<!-- more -->


<h2>Quoting</h2>

<p>We already covered quoting in class. In a nutshell, When you want all special meaning for all characters turned off(i.e., when you want to print $1500 using instead of having the shell interpreting it as an attempt to access the value of a variable 1500) you use single quotes. When you
want certain special meanings (<code>`</code>,<code>\\</code>, <code>$</code>) to be preserved, you use double quotes.
&#8220;` bash Quoting
name=&lsquo;muthu&rsquo;</p>

<h1>note the single quotes and spacing. Double quotes work too.</h1>

<p>echo &ldquo;$name&rdquo;</p>

<h1>Prints out muthu. Retains special meaning of $</h1>

<p>echo &lsquo;$name&rsquo;</p>

<h1>Prints out $name.</h1>

<pre><code>Command Substitution and filename globbing
-------------------------------------------------------------------
Command substitution refers to substituting the standard output of a command to a variable. File name globbing is nothing but expanding filenames using special characters like ``` * ```.
</code></pre>

<p>name=<code>echo $muthu</code></p>

<h1>Backquotes(`) are used to assign the output of a command to a variable a.k.a Command substitution</h1>

<p>name=$(echo &ldquo;muthu&rdquo;)</p>

<h1>Another method for command substitution.</h1>

<p>ls *.zip</p>

<h1>Lists all files with the zip extension. (Recall Wildcards)</h1>

<pre><code>
Knowledge of commandline utilities
---------------------------------------------------

It is unfair to expect everyone to know all the available command line utilites especially when they are not using it on a daily basis. However ``` apropos ``` can be of much help.

Regular Expressions
------------------------------
Regular expressions is not a topic I can explain in a single post. Note that the topic in itself is not so complicated. **_I_** do not know it enough to explain so easily. However, I will concentrate on explaining the commands and programs we used in last lab session. (First five will be covered in this post)
Sed is a text stream manipulator. It can read through a text file line by line and perform modifications and print them to standard output. And it uses regular expressions to search through the text. The general syntax for the most widely used substitution command of sed is this
</code></pre>

<p>sed -n &rsquo;s/something/somethingelse/[p][g]&lsquo; filename
<code>
The sed is the command name while</code> -n <code>option asks the utility to suppress normal output and print only what is specified. (The stuff that follows)</code> s <code>means we want the tool to *substitute* the</code> something <code>into</code> somethingelse <code>and the last two optional flags(marked by the presence of square brackets around them) tell that we want the result to be printed and the we want the expression to be applied globally (By default, only the first something is replaced by somethingelse).
</code> bash Sed basics
echo &ldquo;muthu&rdquo; | sed -n &rsquo;s/muthu/muthuraj/p&rsquo;</p>

<h1>the above command replaces muthu by muthuraj</h1>

<p>echo &ldquo;muthu&rdquo; | sed -n &rsquo;s/([a-z][a-z]*)/&amp;raj/p&#8217;</p>

<h1>the above command does the same but uses regular expressions.</h1>

<pre><code>Sed command to delete first character of each line in a file
------------------------------
(We'll assume that there is a file called sample.txt in your current ditrectory)
</code></pre>

<p>sed &rsquo;s/^.//&lsquo; sample.txt
<code>
Note:</code> / &#8220;` is a seperator between the action, search for pattern and the replacement pattern.</p>

<p>The above command is split as follows:</p>

<p><code>s</code> - substitute</p>

<p><code>^.</code> - <code>^</code> Denotes the beginning of a line. It is what we call an anchor character. <code>.</code> asks the tool to match exactly one character no matter what kind of character</p>

<p><code>//</code> - Nothing between the slashes denotes we replace a single charcter with nothing, thereby &ldquo;deleting&rdquo; that character</p>

<h2>Sed command to delete the last character of each line in a file</h2>

<pre><code class="bash ">sed 's/.$//' sample.txt
</code></pre>

<p><code>s</code>- substitute</p>

<p><code>.$</code> - <code>$</code> Denotes the end of a line. <code>.</code> matches exactly one character no matter what kind of character</p>

<p><code>//</code>- Nothing between the slashes denotes we replace a single charcter with nothing, thereby &ldquo;deleting&rdquo; that character</p>

<h2>Sed Command to swap two words </h2>

<pre><code class="bash Sed to swap two words">sed 's/\([a-z][a-z]*\) /\([a-z][a-z]*\) /\2 \1/' sample.txt
</code></pre>

<p>Here, it gets a little more complicated.</p>

<p>The <code>\(</code>after the first <code>/</code>denotes that we want to use a open bracket to group the pattern. We use the <code>\</code> to turn on a special meaning for the <code>( </code>. (It is complicated. We&rsquo;ll come back to that another day&hellip;..) Same goes for <code>\)</code>.</p>

<p>Now that we have eliminated the escaped Brackets, We&rsquo;ll come to the patterns, between the slashes.</p>

<p><code>[a-z]</code> denotes that we have to match any chracter in the range a-z. Repeating that a second time with a <code>*</code> suffixed and results in selecting a single letter word at the minimum. <code>*</code> denotes the tool will select the pattern preceding it zero or more times. If we include the pattern [a-z] and suffix it with a <code>*</code> it will match nothing too(Read the previous line about <code>*</code> again) zero or more times. The second set selects another word.</p>

<p><code>/\2 \1/ </code> swaps the first and second words ans separates them by a space.</p>

<p>Note: Above version does not work for words with uppercase letters or with symbols like ASK or won&rsquo;t.</p>

<h2>Pipe you /etc/passwd to awk and print it</h2>

<pre><code class="bash AWK">cat /etc/passwd | awk "{print $7}"
</code></pre>

<p><code>cat</code> prints everything in the file to standard output. You pipe it to awk using <code>|</code> and ask awk to print the seventh column by saying <code>"{ print $7}"</code>.</p>

<h2>Develop an interactive grep script that asks for a word and a file name and then tells how many lines contain that word</h2>

<pre><code class="bash ">#! /bin/bash
echo "Enter the word:"
read word
echo "Enter the file name:"
read file
grep -c $word $file
exit 0
</code></pre>

<p>Nothing to explain here.</p>

<p>I will continue the next post as soon as I get a chance. Comment below if you have any doubts. Also, any and all feedback is welcome.</p>

<p>Many thanks to Sankara Narayanan for proof reading.</p>
]]></content>
  </entry>
  
</feed>
